class Dualsensejs{device;outputReportBuffer=new Uint8Array(47);isOutputBufferUpdated=!1;async init(){if(!1 in navigator){console.error("This browser doesn't support HID");return}let t=await navigator.hid.requestDevice({filters:[{vendorId:1356,productId:3302}]});this.device=t[0],await this.device.open(),this.device.addEventListener("inputreport",async t=>{let{data:s,device:e,reportId:i}=t;3302===e.productId&&(this.isOutputBufferUpdated&&(this.outputReportBuffer[0]=12,this.outputReportBuffer[1]=85,await this.device.sendReport(2,this.outputReportBuffer),this.isOutputBufferUpdated=!1),1==i&&this._processData(s))})}_processData(t){let s=t.getUint8(7);this.states.triangle=this._toBool(128&s),this.states.circle=this._toBool(64&s),this.states.cross=this._toBool(32&s),this.states.square=this._toBool(16&s);let e=15&s;this.states.dpadUp=this._toBool(0==e||1==e||7==e),this.states.dpadDown=this._toBool(3==e||4==e||5==e),this.states.dpadLeft=this._toBool(5==e||6==e||7==e),this.states.dpadRight=this._toBool(1==e||2==e||3==e);let i=t.getUint8(8);this.states.share=this._toBool(16&i),this.states.option=this._toBool(32&i),this.states.l3=this._toBool(64&i),this.states.r3=this._toBool(128&i);let o=t.getUint8(9);this.states.ps=this._toBool(1&o),this.states.mute=this._toBool(4&o),this.states.touchpad.pressed=this._toBool(2&o),this.states.gyro[0]=t.getUint8(16),this.states.gyro[1]=t.getUint8(18),this.states.gyro[2]=t.getUint8(20),this.states.accel[0]=t.getUint8(22),this.states.accel[1]=t.getUint8(24),this.states.accel[2]=t.getUint8(26),this.states.ls.x=this._normalizeAxis(t.getUint8(0)),this.states.ls.y=this._normalizeAxis(t.getUint8(1)),this.states.rs.x=this._normalizeAxis(t.getUint8(2)),this.states.rs.y=this._normalizeAxis(t.getUint8(3)),this.states.l2=this._normalizeAxis(t.getUint8(4)),this.states.r2=this._normalizeAxis(t.getUint8(5));let r=t.getUint8(32),u=t.getUint8(33),p=t.getUint8(34),h=t.getUint8(35),a=t.getUint8(36),$=t.getUint8(37),f=t.getUint8(38),d=t.getUint8(39);this.states.touchpad.positions[0].active=!(128&r),this.states.touchpad.positions[0].x=(15&p)<<8|u,this.states.touchpad.positions[0].y=h<<4|(240&p)>>4,this.states.touchpad.positions[1].active=!(128&a),this.states.touchpad.positions[1].x=(15&f)<<8|$,this.states.touchpad.positions[1].y=d<<4|(240&f)>>4}_normalizeAxis(t){return t/255}_toBool(t){return(t?1:0)==1}updateOutputReport(){this.isOutputBufferUpdated||(this.isOutputBufferUpdated=!0)}setColor(t,s,e){this.outputReportBuffer[44]=t,this.outputReportBuffer[45]=s,this.outputReportBuffer[46]=e,this.updateOutputReport()}setPlayerNumber(t){this.outputReportBuffer[43]=t,this.updateOutputReport()}setMicLed(t){this.outputReportBuffer[8]=t,this.updateOutputReport()}micLedState={off:0,on:1,pulse:2};setTrigger(t){t.selectedTrigger==this.triggers.left|t.selectedTrigger==this.triggers.both&&(this.outputReportBuffer[10]=t.mode,this.outputReportBuffer[11]=t.forces[0],this.outputReportBuffer[12]=t.forces[1],this.outputReportBuffer[13]=t.forces[2],this.outputReportBuffer[14]=t.forces[3],this.outputReportBuffer[15]=t.forces[4],this.outputReportBuffer[16]=t.forces[5],this.outputReportBuffer[17]=t.forces[6]),t.selectedTrigger==this.triggers.right|t.selectedTrigger==this.triggers.both&&(this.outputReportBuffer[21]=t.mode,this.outputReportBuffer[22]=t.forces[0],this.outputReportBuffer[23]=t.forces[1],this.outputReportBuffer[24]=t.forces[2],this.outputReportBuffer[25]=t.forces[3],this.outputReportBuffer[26]=t.forces[4],this.outputReportBuffer[27]=t.forces[5],this.outputReportBuffer[28]=t.forces[6]),this.updateOutputReport()}triggers={left:0,right:1,both:2};states={triangle:!1,circle:!1,square:!1,cross:!1,share:!1,option:!1,dpadUp:!1,dpadDown:!1,dpadLeft:!1,dpadRight:!1,ps:!1,mute:!1,l3:!1,r3:!1,l1:!1,r1:!1,l2:0,r2:0,ls:{x:0,y:0},rs:{x:0,y:0},touchpad:{pressed:!1,positions:[{active:!1,x:0,y:0},{active:!1,y:0,x:0}]},accel:[0,0,0],gyro:[0,0,0]}}