class Dualsensejs{device;outputReportBuffer=new Uint8Array(47);isOutputBufferUpdated=!1;async init(){if(!'hid' in navigator){console.error('This browser doesn\'t support HID');return}
let devices=await navigator.hid.requestDevice({filters:[{'vendorId':0x054c,'productId':0x0ce6}],});this.device=devices[0];await this.device.open();this.device.addEventListener("inputreport",async event=>{const{data,device,reportId}=event;if(device.productId!==0x0ce6)return
if(this.isOutputBufferUpdated){this.outputReportBuffer[0]=0x04|0x08;this.outputReportBuffer[1]=0x01|0x04|0x10|0x40;await this.device.sendReport(0x02,this.outputReportBuffer);this.isOutputBufferUpdated=!1}
if(reportId==0x01)this._processData(data)})}
_processData(data){const buttons0=data.getUint8(7);this.states.triangle=this._toBool(buttons0&0x80);this.states.circle=this._toBool(buttons0&0x40);this.states.cross=this._toBool(buttons0&0x20);this.states.square=this._toBool(buttons0&0x10);const dpad=buttons0&0x0f;this.states.dpadUp=this._toBool(dpad==0||dpad==1||dpad==7);this.states.dpadDown=this._toBool(dpad==3||dpad==4||dpad==5);this.states.dpadLeft=this._toBool(dpad==5||dpad==6||dpad==7);this.states.dpadRight=this._toBool(dpad==1||dpad==2||dpad==3);const buttons1=data.getUint8(8)
this.states.share=this._toBool(buttons1&0x10);this.states.option=this._toBool(buttons1&0x20);this.states.l3=this._toBool(buttons1&0x40);this.states.r3=this._toBool(buttons1&0x80);const buttons2=data.getUint8(9);this.states.ps=this._toBool(buttons2&0x01);this.states.mute=this._toBool(buttons2&0x04);this.states.touchpad.pressed=this._toBool(buttons2&0x02);this.states.gyro[0]=data.getUint8(16);this.states.gyro[1]=data.getUint8(18);this.states.gyro[2]=data.getUint8(20);this.states.accel[0]=data.getUint8(22);this.states.accel[1]=data.getUint8(24);this.states.accel[2]=data.getUint8(26);this.states.ls.x=this._normalizeAxis(data.getUint8(0));this.states.ls.y=this._normalizeAxis(data.getUint8(1));this.states.rs.x=this._normalizeAxis(data.getUint8(2));this.states.rs.y=this._normalizeAxis(data.getUint8(3));this.states.l2=this._normalizeAxis(data.getUint8(4));this.states.r2=this._normalizeAxis(data.getUint8(5));const touch00=data.getUint8(32);const touch01=data.getUint8(33);const touch02=data.getUint8(34);const touch03=data.getUint8(35);const touch10=data.getUint8(36);const touch11=data.getUint8(37);const touch12=data.getUint8(38);const touch13=data.getUint8(39);this.states.touchpad.positions[0].active=!(touch00&0x80);this.states.touchpad.positions[0].x=((touch02&0x0F)<<8)|touch01;this.states.touchpad.positions[0].y=(touch03<<4)|((touch02&0xF0)>>4);this.states.touchpad.positions[1].active=!(touch10&0x80);this.states.touchpad.positions[1].x=((touch12&0x0F)<<8)|touch11;this.states.touchpad.positions[1].y=(touch13<<4)|((touch12&0xF0)>>4)}
_normalizeAxis(value){return value/255}
_toBool(number){return(number?1.0:0.0)==1}
updateOutputReport(){if(!this.isOutputBufferUpdated)this.isOutputBufferUpdated=!0}
setColor(red,green,blue){this.outputReportBuffer[44]=red;this.outputReportBuffer[45]=green;this.outputReportBuffer[46]=blue;this.updateOutputReport()}
setPlayerNumber(number){this.outputReportBuffer[43]=number;this.updateOutputReport()}
setMicLed(state){this.outputReportBuffer[8]=state
this.updateOutputReport()}
micLedState={off:0x00,on:0x01,pulse:0x02};setTrigger(triggerConfig){if(triggerConfig.selectedTrigger==this.triggers.left|triggerConfig.selectedTrigger==this.triggers.both){this.outputReportBuffer[10]=triggerConfig.mode;this.outputReportBuffer[11]=triggerConfig.forces[0];this.outputReportBuffer[12]=triggerConfig.forces[1];this.outputReportBuffer[13]=triggerConfig.forces[2];this.outputReportBuffer[14]=triggerConfig.forces[3];this.outputReportBuffer[15]=triggerConfig.forces[4];this.outputReportBuffer[16]=triggerConfig.forces[5];this.outputReportBuffer[17]=triggerConfig.forces[6]}
if(triggerConfig.selectedTrigger==this.triggers.right|triggerConfig.selectedTrigger==this.triggers.both){this.outputReportBuffer[21]=triggerConfig.mode;this.outputReportBuffer[22]=triggerConfig.forces[0];this.outputReportBuffer[23]=triggerConfig.forces[1];this.outputReportBuffer[24]=triggerConfig.forces[2];this.outputReportBuffer[25]=triggerConfig.forces[3];this.outputReportBuffer[26]=triggerConfig.forces[4];this.outputReportBuffer[27]=triggerConfig.forces[5];this.outputReportBuffer[28]=triggerConfig.forces[6]}
this.updateOutputReport()}
triggers={left:0,right:1,both:2};states={triangle:!1,circle:!1,square:!1,cross:!1,share:!1,option:!1,dpadUp:!1,dpadDown:!1,dpadLeft:!1,dpadRight:!1,ps:!1,mute:!1,l3:!1,r3:!1,l1:!1,r1:!1,l2:0,r2:0,ls:{x:0,y:0},rs:{x:0,y:0},touchpad:{pressed:!1,positions:[{active:!1,x:[0,0],y:[0,0]},{active:!1,y:[0,0],X:[0,0]}]},accel:[0,0,0],gyro:[0,0,0]}}